package uk.ac.ebi.app;

/*
 * Copyright (C) 2014. EMBL, European Bioinformatics Institute
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openscience.cdk.exception.CDKException;
import uk.ac.cam.ch.wwmm.opsin.OpsinResult;
import uk.ac.ebi.osra.OSRA;
import uk.ac.ebi.osra.OSRAProcess;
import uk.ac.ebi.tools.ChemicalNameToStructure;
import uk.ac.ebi.tools.ImageRenderer;
import uk.ac.ebi.tools.OpsinConverter;
import uk.ac.ebi.tools.PDFViewer;
import uk.ac.ebi.tools.StructureListener;
import uk.ac.ebi.utils.ImageUtility;
import uk.ac.ebi.utils.PDFFileFilter;
import uk.ac.ebi.utils.SplashingScreen;
import uk.ac.ebi.utils.Utility;

/**
 *
 * @author Vishal Siramshetty <vishal[at]ebi.ac.uk>
 */
public class OSRAChem extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public OSRAChem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queryPanel = new javax.swing.JPanel();
        pdfInput = new javax.swing.JTextField();
        choosePDF = new javax.swing.JButton();
        pdf = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        imageInput = new javax.swing.JTextField();
        chooseImage = new javax.swing.JButton();
        submitQuery = new javax.swing.JButton();
        nameInput = new javax.swing.JTextField();
        name = new javax.swing.JLabel();
        chooseNames = new javax.swing.JButton();
        progressLabel = new javax.swing.JLabel();
        inputDisplayPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        resultFrame = new javax.swing.JInternalFrame();
        resultLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("OSRAChem");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setName("outerFrame"); // NOI18N
        setResizable(false);

        queryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        pdfInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfInputActionPerformed(evt);
            }
        });

        choosePDF.setText("File");
        choosePDF.setToolTipText("Select a PDF file");
        choosePDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePDFActionPerformed(evt);
            }
        });

        pdf.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        pdf.setText(" PDF Input");

        image.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        image.setText(" Image Input");

        imageInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageInputActionPerformed(evt);
            }
        });

        chooseImage.setText("File");
        chooseImage.setToolTipText("Select an image file (.png is ideal)");
        chooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImageActionPerformed(evt);
            }
        });

        submitQuery.setText("Submit");
        submitQuery.setToolTipText("Click to process the input");
        submitQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitQueryActionPerformed(evt);
            }
        });

        nameInput.setToolTipText("Paste or type an IUPAC name and hit Enter");
        nameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInputActionPerformed(evt);
            }
        });

        name.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        name.setText(" Chemical Name Input");

        chooseNames.setText("File");
        chooseNames.setToolTipText("Select a text file with IUPAC names (one on each line)");
        chooseNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(image)
                            .addComponent(pdf)
                            .addGroup(queryPanelLayout.createSequentialGroup()
                                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(imageInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                                    .addComponent(pdfInput, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameInput))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chooseImage)
                                    .addComponent(choosePDF)
                                    .addComponent(chooseNames)))
                            .addComponent(name)))
                    .addGroup(queryPanelLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(submitQuery)))
                .addGap(20, 20, 20))
        );
        queryPanelLayout.setVerticalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(pdf, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choosePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(image)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseImage))
                .addGap(18, 18, 18)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseNames))
                .addGap(32, 32, 32)
                .addComponent(submitQuery)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        progressLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        progressLabel.setText(" ");

        inputDisplayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        inputDisplayPanel.setToolTipText("");

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout inputDisplayPanelLayout = new javax.swing.GroupLayout(inputDisplayPanel);
        inputDisplayPanel.setLayout(inputDisplayPanelLayout);
        inputDisplayPanelLayout.setHorizontalGroup(
            inputDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputDisplayPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputDisplayPanelLayout.setVerticalGroup(
            inputDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        resultFrame.setMaximumSize(new java.awt.Dimension(150, 65));
        resultFrame.setPreferredSize(new java.awt.Dimension(150, 299));
        resultFrame.setVisible(true);

        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setToolTipText("");

        javax.swing.GroupLayout resultFrameLayout = new javax.swing.GroupLayout(resultFrame.getContentPane());
        resultFrame.getContentPane().setLayout(resultFrameLayout);
        resultFrameLayout.setHorizontalGroup(
            resultFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultFrameLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
        );
        resultFrameLayout.setVerticalGroup(
            resultFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap())
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                            .addComponent(queryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(inputDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(resultFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 24, Short.MAX_VALUE))
                    .addComponent(inputDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        resultFrame.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pdfInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfInputActionPerformed

        Utility.UI.showInfoMessage(getRootPane(), "Click on submit to process the input.");
    }//GEN-LAST:event_pdfInputActionPerformed

    private void choosePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePDFActionPerformed

        progressLabel.setText("<html><b>Status</b>: loading PDF document ...");
        File pdfFile = Utility.UI.getFile(inputDisplayPanel, new FileNameExtensionFilter(" PDF File (*.pdf) ", "pdf"));
        PDFFileFilter filter = new PDFFileFilter();
        if (pdfFile != null && filter.accept(pdfFile)) {

            if (imageInput.getText() != null) {
                imageInput.setText(null);
            }
            if (nameInput.getText() != null) {
                nameInput.setText(null);
            }

            if (imageLabel.getIcon() != null) {
                imageLabel.setIcon(null);
            }

            String filepath = pdfFile.getAbsolutePath();

            pdfInput.setText(filepath);
            // load the PDF in display window
            viewer = new PDFViewer();
            viewer.loadPDFInViewer(filepath, inputDisplayPanel);
            progressLabel.setText("<html><b>Status</b>: PDF successfully loaded!");
        } else {
            Utility.UI.showInfoMessage(getRootPane(), "Error reading PDF file. Please check.");
        }
    }//GEN-LAST:event_choosePDFActionPerformed

    private void imageInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageInputActionPerformed

        Utility.UI.showInfoMessage(getRootPane(), "Click on submit to process the input.");
    }//GEN-LAST:event_imageInputActionPerformed

    private void submitQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitQueryActionPerformed

        // set progress bar
        progressLabel.setText("<html><b>Status</b>: processing ...");
        // set cursor to waiting
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        // set the path for OSRA instalation
        if (System.getProperty("os.name").equals("Mac OS X")) {
            osraPath = "/usr/local/Cellar/osra/2.0.0/bin/osra";
        } else {
            osraPath = "osra";
        }

        // get inputs from all text fields
        String type1 = pdfInput.getText().trim();
        String type2 = imageInput.getText().trim();
        String type3 = nameInput.getText().trim();

        /*
         If no input is provided
         */
        if (type1.isEmpty() && type2.isEmpty() && type3.isEmpty()) {
            progressLabel.setText("<html><b>Status</b>: Error");
            Utility.UI.showInfoMessage(getRootPane(), "No input provided.");
        } /*
         If the input is image
         */ else if (!type2.isEmpty() && type1.isEmpty() && type3.isEmpty()) {
            //progressLabel.setText("<html><b>Status</b>: Processing the image input. please wait ...");
            OSRAProcess process = new OSRAProcess(osraPath);
            List<String> structures = process.getStructuresFromImage(imageInput.getText().trim());
            if (structures.size() > 1) {
                progressLabel.setText("<html><b>Status</b>: extracting structures from image!");
                try {
                    process.displayImagesInPanel(structures, resultFrame);
                } catch (CDKException ex) {
                    Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(structures.toString());
                progressLabel.setText("<html><b>Status</b>: " + structures.size() + " structure(s) extracted successfully");
            } else if (structures.size() == 1) {
                progressLabel.setText("<html><b>Status</b>: extracting structure from image!");
                // display single structure

                //String smile = process.getResult(imageInput.getText().trim(), osraPath);
                try {
                    System.out.println("trying...");
                    ImageIcon icon = new ImageRenderer().getImageIconFromSmile(250, 260, structures.get(0));
                    icon = ImageUtility.getBorderedIcon(icon);
                    JLabel label = new JLabel(icon);
                    label.setSize(250, 260);
                    label.setVisible(true);
                    label.setForeground(Color.BLACK);
                    label.setToolTipText("Double click to save image (or) Single click to open in a new window.");
                    resultFrame.setContentPane(label);
                    StructureListener listener = new StructureListener(structures.get(0));
                    //listener.setdoubleClickToSaveImage(icon, label);
                    listener.setSingleClickToDisplayProperties(label);
                    progressLabel.setText("<html><b>Status</b>: structure successfully loaded!");

                } catch (CDKException ex) {
                    Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (structures.isEmpty()) {
                progressLabel.setText("<html><b>Status</b>: " + structures.size() + " structure(s) extracted");
            }

        }/*
         If the input is PDF
         */ else if (!type1.isEmpty() && type2.isEmpty() && type3.isEmpty()) {
            //progressLabel.setText("<html><b>Status</b>: Processing the PDF input. Please wait ...");
            try {
                List<String> structures = new OSRAProcess(osraPath).getStructuresFromPdf(pdfInput.getText().trim());

                if (!structures.isEmpty()) {
                    new OSRA().displayImagesInPanel(structures, resultFrame);
                    System.out.println(structures.toString());
                    progressLabel.setText("<html><b>Status</b>: " + structures.size() + " structure(s) extracted successfully");
                } else {
                    progressLabel.setText("<html><b>Status</b>: no structures were found in the input PDF");
                }

            } catch (IOException | CDKException ex) {
                Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
            }

        } /*
         If the input is a name or list of names
         */ else if (!type3.isEmpty() && type2.isEmpty() && type1.isEmpty()) {
            if (nameInput.getText().trim() != null) {
                progressLabel.setText("<html><b>Status</b>: converting names to structures ...");
                String filepath = nameInput.getText().trim();

                if (pdfInput.getText() != null) {
                    pdfInput.setText(null);
                }
                if (imageInput.getText() != null) {
                    imageInput.setText(null);
                }

                if (imageLabel.getIcon() != null) {
                    imageLabel.setIcon(null);
                }

                List<String> names = Utility.getNamesInFile(new File(filepath));
                List<String> smiles = new ArrayList<>();
                for (String n : names) {
                    try {
                        OpsinConverter nts = new OpsinConverter(n);
                        String smile = nts.getSmile();
                        smiles.add(smile);
                    } catch (CDKException ex) {
                        Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (smiles.size() > 0) {

                    try {
                        new OSRA().displayImagesInPanel(smiles, resultFrame);
                        progressLabel.setText("<html><b>Status</b>: " + smiles.size() + " structure(s) extracted successfully");
                    } catch (CDKException ex) {
                        Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            } else {
                Utility.UI.showInfoMessage(getRootPane(), "Error reading text file. Please check.");
            }
        } /*
         If more than one input is provided
         */ else if (!type1.isEmpty() && !type2.isEmpty() || !type2.isEmpty() && !type3.isEmpty() || !type1.isEmpty() && !type3.isEmpty()) {

            progressLabel.setText("<html><b>Status</b>: Error");
            Utility.UI.showInfoMessage(getRootPane(), "More than one input provided.");

        }

        // set the cursor to normal
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_submitQueryActionPerformed

    private void chooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImageActionPerformed
        // TODO add your handling code here:

        progressLabel.setText("<html><b>Status</b>: loading image ...");
        File imgFile = Utility.UI.getFile(inputDisplayPanel, new FileNameExtensionFilter(" Image Files (*.png) ", "png"));
        if (imgFile != null) {

            String filepath = imgFile.getAbsolutePath();
            imageInput.setText(filepath);

            if (nameInput.getText() != null) {
                nameInput.setText(null);
            }
            if (pdfInput.getText() != null) {
                pdfInput.setText(null);
            }
            if (inputDisplayPanel.getComponentCount() > 1) {
                System.out.println("Yes there is a component already. Removing it.");
                inputDisplayPanel.removeAll();
                inputDisplayPanel.revalidate();
                inputDisplayPanel.repaint();
                inputDisplayPanel.add(imageLabel);
                //viewer.disposeViewer();
                System.out.println("Component removed.");
            }

            //progressLabel.setText("<html><b>Status</b>: loading PDF document ...");
            // display
            BufferedImage im = ImageUtility.loadImageFromFile(filepath);
            ImageIcon icon = ImageUtility.getImageIcon(im);
            ImageIcon bIcon = ImageUtility.getBorderedIcon(icon);
            //JLabel imageLabel = new JLabel();
            imageLabel.setAlignmentX(CENTER_ALIGNMENT);
            imageLabel.setIcon(bIcon);
            //inputDisplayPanel.add(imageLabel);
            //ImageUtility.loadIMageIconToPanel(inputDisplayPanel, ImageUtility.getImageIcon(im));
            progressLabel.setText("<html><b>Status</b>: Image successfully loaded!");
        } else {
            Utility.UI.showInfoMessage(getRootPane(), "Error reading image file. Please check.");
        }
    }//GEN-LAST:event_chooseImageActionPerformed

    private void nameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInputActionPerformed
        // TODO add your handling code here:
        progressLabel.setText("<html><b>Status</b>: processing name ...");
        if (pdfInput.getText() != null) {
            pdfInput.setText(null);
        }
        if (imageInput.getText() != null) {
            imageInput.setText(null);
        }

        if (imageLabel.getIcon() != null) {
            imageLabel.setIcon(null);
        }

        String query = nameInput.getText().trim();
        try {
            String status = ChemicalNameToStructure.getStatus(query);
            if (status == null) {
                OpsinConverter nts = new OpsinConverter(query);
                ImageIcon icon = new ImageRenderer().getImageIconFromSmile(250, 260, nts.getSmile());
                icon = ImageUtility.getBorderedIcon(icon);
                JLabel label = new JLabel(icon);
                label.setSize(250, 260);
                label.setVisible(true);
                label.setToolTipText("Double click to save image (or) Single click to open in a new window.");

                resultFrame.setContentPane(label);
                StructureListener listener = new StructureListener(nts.getSmile());
                listener.setSingleClickToDisplayProperties(label);
                progressLabel.setText("<html><b>Status</b>: structure successfully loaded!");

            } else if (status.equalsIgnoreCase(OpsinResult.OPSIN_RESULT_STATUS.FAILURE.toString())) {
                progressLabel.setText("<html><b>Status</b>: Error");
                Utility.UI.showInfoMessage(getRootPane(), "Name input cannot be processed. Opsin did not recognize the name.");
            }

        } catch (CDKException ex) {
            Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_nameInputActionPerformed

    private void chooseNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseNamesActionPerformed

        progressLabel.setText("<html><b>Status</b>: loading names from file ...");
        File txtFile = Utility.UI.getFile(inputDisplayPanel, new FileNameExtensionFilter(" Text Files (*.txt) ", "txt"));

        if (txtFile != null) {
            nameInput.setText(txtFile.getAbsolutePath());
            progressLabel.setText("<html><b>Status</b>: names loaded from file");
        } else {
            Utility.UI.showInfoMessage(getRootPane(), "Error reading text file. Please check.");
        }
    }//GEN-LAST:event_chooseNamesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OSRAChem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OSRAChem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OSRAChem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OSRAChem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Image img;
        try {
            img = Toolkit.getDefaultToolkit().getImage(new URL("http://i60.tinypic.com/4smc04.jpg"));
            SplashingScreen sp = new SplashingScreen(img);
        } catch (MalformedURLException ex) {
            Logger.getLogger(OSRAChem.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                OSRAChem ui = new OSRAChem();

                ui.setVisible(true);
                GraphicsConfiguration gc = ui.getGraphicsConfiguration();
                Rectangle bounds = gc.getBounds();
                Dimension size = ui.getPreferredSize();
                ui.setLocation((int) ((bounds.width / 2) - (size.getWidth() / 2)),
                        (int) ((bounds.height / 2) - (size.getHeight() / 2)));
                ui.addWindowListener(new WindowListener() {

                    @Override
                    public void windowOpened(WindowEvent e) {

                    }

                    @Override
                    public void windowClosing(WindowEvent e) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        JOptionPane closing = new JOptionPane();

                        int selectedOption = closing.showConfirmDialog(closing, "Are you sure you want to close OSRAChem?",
                                "OSRAChem",
                                JOptionPane.YES_NO_OPTION);
                        // if choosen Yes, then the application will be closed
                        if (selectedOption == JOptionPane.YES_OPTION) {
                            System.exit(0);
                        }
                        if (selectedOption == JOptionPane.NO_OPTION) {
                            // do nothing
                        }

                    }

                    @Override
                    public void windowClosed(WindowEvent e) {
                    }

                    @Override
                    public void windowIconified(WindowEvent e) {
                    }

                    @Override
                    public void windowDeiconified(WindowEvent e) {
                    }

                    @Override
                    public void windowActivated(WindowEvent e) {
                    }

                    @Override
                    public void windowDeactivated(WindowEvent e) {
                    }

                });

            }
        });
    }

    private String osraPath;
    PDFViewer viewer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseImage;
    private javax.swing.JButton chooseNames;
    private javax.swing.JButton choosePDF;
    private javax.swing.JLabel image;
    private javax.swing.JTextField imageInput;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel inputDisplayPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameInput;
    private javax.swing.JLabel pdf;
    private javax.swing.JTextField pdfInput;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JInternalFrame resultFrame;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton submitQuery;
    // End of variables declaration//GEN-END:variables
}
